# ===============================================
# Script de d√©ploiement Azure Web App
# D√©ploie une Web App Linux avec App Service Plan
# ===============================================

param(
    [Parameter(Mandatory=$true)]
    [string]$ResourceGroupName,
    
    [Parameter(Mandatory=$true)]
    [string]$WebAppName,
    
    [Parameter(Mandatory=$true)]
    [string]$Location = "France Central",
    
    [Parameter(Mandatory=$false)]
    [string]$AppServicePlanName = "$WebAppName-plan",
    
    [Parameter(Mandatory=$false)]
    [string]$Sku = "Basic",
    
    [Parameter(Mandatory=$false)]
    [string]$SkuCode = "B1",
    
    [Parameter(Mandatory=$false)]
    [string]$LinuxFxVersion = "PYTHON|3.11",
    
    [Parameter(Mandatory=$false)]
    [string]$TemplateFile = "../arm-template.json"
)

# ===============================================
# Configuration des couleurs pour l'affichage
# ===============================================
$Host.UI.RawUI.ForegroundColor = "White"

function Write-Info {
    param([string]$Message)
    Write-Host "‚ÑπÔ∏è  $Message" -ForegroundColor Cyan
}

function Write-Success {
    param([string]$Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green
}

function Write-Error {
    param([string]$Message)
    Write-Host "‚ùå $Message" -ForegroundColor Red
}

function Write-Warning {
    param([string]$Message)
    Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor Yellow
}

# ===============================================
# V√©rification des pr√©requis
# ===============================================
Write-Info "V√©rification des pr√©requis..."

# V√©rifier si Azure CLI est install√©
try {
    $azVersion = az version --output tsv --query '"azure-cli"' 2>$null
    if ($azVersion) {
        Write-Success "Azure CLI version $azVersion d√©tect√©"
    }
} catch {
    Write-Error "Azure CLI n'est pas install√© ou n'est pas dans le PATH"
    exit 1
}

# V√©rifier si l'utilisateur est connect√©
try {
    $accountInfo = az account show --output tsv --query 'name' 2>$null
    if ($accountInfo) {
        Write-Success "Connect√© √† Azure: $accountInfo"
    }
} catch {
    Write-Error "Vous n'√™tes pas connect√© √† Azure. Utilisez 'az login'"
    exit 1
}

# ===============================================
# Variables de d√©ploiement
# ===============================================
$subscriptionId = az account show --query id --output tsv
$timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
$deploymentName = "webapp-deployment-$timestamp"

Write-Info "Configuration du d√©ploiement:"
Write-Host "  ‚Ä¢ Subscription ID: $subscriptionId"
Write-Host "  ‚Ä¢ Resource Group: $ResourceGroupName"
Write-Host "  ‚Ä¢ Web App Name: $WebAppName"
Write-Host "  ‚Ä¢ Location: $Location"
Write-Host "  ‚Ä¢ App Service Plan: $AppServicePlanName"
Write-Host "  ‚Ä¢ SKU: $Sku ($SkuCode)"
Write-Host "  ‚Ä¢ Runtime: $LinuxFxVersion"

# ===============================================
# Cr√©ation du groupe de ressources
# ===============================================
Write-Info "V√©rification/Cr√©ation du groupe de ressources..."

$rgExists = az group exists --name $ResourceGroupName
if ($rgExists -eq "false") {
    Write-Info "Cr√©ation du groupe de ressources $ResourceGroupName..."
    az group create --name $ResourceGroupName --location $Location
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Groupe de ressources cr√©√© avec succ√®s"
    } else {
        Write-Error "√âchec de la cr√©ation du groupe de ressources"
        exit 1
    }
} else {
    Write-Success "Groupe de ressources $ResourceGroupName existe d√©j√†"
}

# ===============================================
# D√©ploiement du template ARM
# ===============================================
Write-Info "D√©marrage du d√©ploiement ARM..."

# Param√®tres pour le template
$parameters = @"
{
    "subscriptionId": {"value": "$subscriptionId"},
    "resourceGroupName": {"value": "$ResourceGroupName"},
    "name": {"value": "$WebAppName"},
    "location": {"value": "$Location"},
    "hostingPlanName": {"value": "$AppServicePlanName"},
    "serverFarmResourceGroup": {"value": "$ResourceGroupName"},
    "alwaysOn": {"value": true},
    "ftpsState": {"value": "Disabled"},
    "autoGeneratedDomainNameLabelScope": {"value": "TenantReuse"},
    "sku": {"value": "$Sku"},
    "skuCode": {"value": "$SkuCode"},
    "workerSize": {"value": "0"},
    "workerSizeId": {"value": "0"},
    "numberOfWorkers": {"value": "1"},
    "linuxFxVersion": {"value": "$LinuxFxVersion"}
}
"@

# √âcriture des param√®tres dans un fichier temporaire
$paramFile = "parameters-temp.json"
$parameters | Out-File -FilePath $paramFile -Encoding UTF8

try {
    Write-Info "Ex√©cution du d√©ploiement ARM..."
    
    az deployment group create `
        --resource-group $ResourceGroupName `
        --name $deploymentName `
        --template-file $TemplateFile `
        --parameters "@$paramFile" `
        --verbose

    if ($LASTEXITCODE -eq 0) {
        Write-Success "D√©ploiement ARM termin√© avec succ√®s!"
        
        # R√©cup√©ration des informations de la Web App
        Write-Info "R√©cup√©ration des informations de d√©ploiement..."
        
        $webAppUrl = az webapp show --name $WebAppName --resource-group $ResourceGroupName --query "defaultHostName" --output tsv
        $webAppState = az webapp show --name $WebAppName --resource-group $ResourceGroupName --query "state" --output tsv
        
        Write-Success "Informations de la Web App:"
        Write-Host "  ‚Ä¢ Nom: $WebAppName"
        Write-Host "  ‚Ä¢ URL: https://$webAppUrl"
        Write-Host "  ‚Ä¢ √âtat: $webAppState"
        Write-Host "  ‚Ä¢ Groupe de ressources: $ResourceGroupName"
        
        # Configuration de l'application
        Write-Info "Configuration post-d√©ploiement..."
        
        # Configuration des param√®tres d'application si n√©cessaire
        Write-Info "Vous pouvez maintenant configurer vos variables d'environnement avec:"
        Write-Host "az webapp config appsettings set --name $WebAppName --resource-group $ResourceGroupName --settings KEY=VALUE" -ForegroundColor Yellow
        
    } else {
        Write-Error "√âchec du d√©ploiement ARM"
        exit 1
    }
    
} catch {
    Write-Error "Erreur durant le d√©ploiement: $_"
    exit 1
} finally {
    # Nettoyage du fichier temporaire
    if (Test-Path $paramFile) {
        Remove-Item $paramFile -Force
    }
}

# ===============================================
# R√©sum√© final
# ===============================================
Write-Success "üéâ D√©ploiement termin√© avec succ√®s!"
Write-Info "Prochaines √©tapes recommand√©es:"
Write-Host "1. Configurer les variables d'environnement de votre application"
Write-Host "2. D√©ployer votre code via Azure CLI, GitHub Actions, ou VS Code"
Write-Host "3. Configurer un nom de domaine personnalis√© si n√©cessaire"
Write-Host "4. Activer Application Insights pour le monitoring"

Write-Host "`nüåê Votre application est accessible √†: https://$webAppUrl" -ForegroundColor Green